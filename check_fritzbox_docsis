#!/usr/bin/env bash

. ./check_fritzbox.config.sh
. ./check_fritzbox.functions.sh

CRITICAL=0
WARNING=0

fetch_docsis_data()
{
    curl -sk "https://$HOST/data.lua?sid=$SID&update=&xhr=1&t1540371669938=nocache" > /tmp/icinga-fritzbox-"$HOST"-data.json
    curl -sk "https://$HOST/internet/docsis_overview.lua?sid=$SID&update=&xhr=1&t1540371669938=nocache" > /tmp/icinga-fritzbox-"$HOST"-general.json
    curl -sk "https://$HOST/internet/docsis_info.lua?update=uiInfo&sid=$SID&xhr=1&t1537694807848=nocache" | html2text | sed "s@\xA0@@g" | sed "s@\xC2@@g"  > /tmp/icinga-fritzbox-"$HOST"-channels.html
    # curl -sk "https://$HOST/internet/docsis_info.lua?update=uiInfo_ds&sid=$SID&useajax=1&xhr=1&t1586064147210=nocache" | html2text | sed "s@\xA0@@g" | sed "s@\xC2@@g"  > /tmp/icinga-fritzbox-$HOST-channels_rx.html
    # curl -sk "https://$HOST/internet/docsis_info.lua?update=uiInfo_us&sid=$SID&useajax=1&xhr=1&t1586064147210=nocache" | html2text | sed "s@\xA0@@g" | sed "s@\xC2@@g"  > /tmp/icinga-fritzbox-$HOST-channels_tx.html
}

fetch_system_data()
{
    curl -sk https://$HOST/data.lua -d "xhr=1&sid=$SID&lang=de&page=ecoStat&xhrId=all&no_sidrenew" > /tmp/icinga-fritzbox-"$HOST"-system-data.json
}

if [ ! -s /tmp/icinga-fritzbox-"$HOST"-sid.txt ] || [ ! -s /tmp/icinga-fritzbox-"$HOST"-channels.html ] || [ ! -s /tmp/icinga-fritzbox-"$HOST"-general.json ]; then
    login
else
    SID=$(cat /tmp/icinga-fritzbox-"$HOST"-sid.txt)
fi

fetch_docsis_data

if [ ! -s /tmp/icinga-fritzbox-"$HOST"-channels.html ] || [ ! -s /tmp/icinga-fritzbox-"$HOST"-general.json ]; then
    login
    fetch_docsis_data
fi

fetch_system_data

CPU_USAGE=$(jq -r '.data.cpuutil.series[0] | last' < /tmp/icinga-fritzbox-"$HOST"-system-data.json)
RAM_FREE=$(jq -r '.data.ramusage.series[2] | last' < /tmp/icinga-fritzbox-"$HOST"-system-data.json)
CPU_TEMP=$(jq -r '.data.cputemp.series[0] | last' < /tmp/icinga-fritzbox-"$HOST"-system-data.json)

if lower "$RAM_FREE" 90; then
    CRITICAL=1
elif lower "$RAM_FREE" 80; then
    WARNING=1
fi

if greater "$CPU_TEMP" 85; then
    CRITICAL=1
elif greater "$CPU_TEMP" 70; then
    WARNING=1
fi

MODEL=$(jq -r '.data.fritzos.Productname' < /tmp/icinga-fritzbox-"$HOST"-data.json)
DOCSISVERSION=$(jq -rc '.stateTxt[] | select(contains("DOCSIS"))' < /tmp/icinga-fritzbox-"$HOST"-general.json)
MODELOFFSET=0

if echo "$MODEL" | grep -q "6360"; then
    MODELOFFSET=0
    MAX_RX_CHANNELS=4
    MAX_TX_CHANNELS=4
elif echo "$MODEL" | grep -q "6591"; then
    MODELOFFSET=1
    MAX_RX_CHANNELS=32
    MAX_TX_CHANNELS=8
else
    MODELOFFSET=0
    status_unknown "UNKNOWN: $MODEL is not known to me. Please report an issue at https://github.com/nohn/monitoring-plugins_check_fritzbox_docsis_parameters/issues/new"
fi

# Thresholds for RX SNR MSE
CRIT_LOWER[16+$MODELOFFSET]=30.1
WARN_LOWER[16+$MODELOFFSET]=32.1
if echo "$DOCSISVERSION" | grep -q "DOCSIS 3.0"; then
    # Thresholds for RX Power Level in dB(mV)
    # In fact, these values depend on the QAM, using 256QAM
    # thresholds here. 64QAM is more tolerant...
    CRIT_LOWER[15+$MODELOFFSET]=-7.9
    WARN_LOWER[15+$MODELOFFSET]=-5.9
    WARN_UPPER[15+$MODELOFFSET]=18
    CRIT_UPPER[15+$MODELOFFSET]=20
    # Thresholds for TX Power Level in dB(mV)
    CRIT_LOWER[32+$MODELOFFSET]=35.1
    WARN_LOWER[32+$MODELOFFSET]=37.1
    WARN_UPPER[32+$MODELOFFSET]=51
    CRIT_UPPER[32+$MODELOFFSET]=53
elif echo "$DOCSISVERSION" | grep -q "DOCSIS 3.1"; then
    # Thresholds for RX Power Level in dB(mV)
    # In fact, these values depend on the QAM, using 4096QAM
    # thresholds here. 2048QAM and 1024 QAM are more tolerant...
    CRIT_LOWER[15+$MODELOFFSET]=-1.9
    WARN_LOWER[15+$MODELOFFSET]=0.1
    WARN_UPPER[15+$MODELOFFSET]=24
    CRIT_UPPER[15+$MODELOFFSET]=26
    # Thresholds for TX Power Level in dB(mV)
    CRIT_LOWER[32+$MODELOFFSET]=38.1
    WARN_LOWER[32+$MODELOFFSET]=40.1
    WARN_UPPER[32+$MODELOFFSET]=48
    CRIT_UPPER[32+$MODELOFFSET]=50
else
    status_unknown "$DOCSISVERSION is unknown to me."
fi

if [ ! -z "$CSVOUT" ]; then
    FPING=$(fping -c 10 -o -q 8.8.8.8 2>&1)
    PACKETLOSS=$(echo "$FPING" | cut -d "/" -f 5 | cut -d "," -f 1)
else
    PACKETLOSS="undefined"
fi

METRICS[12+$MODELOFFSET]="RX Channel"
METRICS[13+$MODELOFFSET]="RX Frequency"
METRICS[14+$MODELOFFSET]="RX Modulation QAM"
METRICS[15+$MODELOFFSET]="RX Power Level"
METRICS[16+$MODELOFFSET]="RX SNR MSE"
METRICS[17+$MODELOFFSET]="RX Latency"
METRICS[18+$MODELOFFSET]="RX Correctable Errors"
METRICS[19+$MODELOFFSET]="RX Uncorrectable Errors"
METRICS[28+$MODELOFFSET]="TX Channel"
METRICS[29+$MODELOFFSET]="TX Frequency"
METRICS[30+$MODELOFFSET]="TX Modulation QAM"
METRICS[32+$MODELOFFSET]="TX Power Level"

UNITS[18+$MODELOFFSET]=c
UNITS[19+$MODELOFFSET]=c

LINENUMBER=0;
OUTPUT="CPU Usage: $CPU_USAGE%, CPU Temp: $CPU_TEMPÂ°C, RAM Free: $RAM_FREE%"
PERFDATA="'CPU Usage'=$CPU_USAGE% 'CPU Temp'=$CPU_TEMP 'RAM Free'=$RAM_FREE%"
CSV=$(date -u +"%Y-%m-%dT%H:%M:%SZ")";$PACKETLOSS"
while read -r LINE; do
    LINENUMBER=$((LINENUMBER+1))
    METRIC=${METRICS[$LINENUMBER]}
    if [ ! -z "$METRIC" ]; then
        OUTPUT="$OUTPUT\n$METRIC:"
        IFS=" " read -r -a LINEARRAY <<< "$LINE"
        if echo "$METRIC" | grep -q "RX"; then
            MAX_CHANNELS=$MAX_RX_CHANNELS
        else
            MAX_CHANNELS=$MAX_TX_CHANNELS
        fi
        for CHANNEL in $(seq 1 "$MAX_CHANNELS"); do
            CHANNELINDEX=$((CHANNEL-1))
            if [ "${LINEARRAY[$CHANNELINDEX]+isset}" ]; then
                VALUE=$(echo "${LINEARRAY[$CHANNELINDEX]}" | grep -Eo "[0-9]*\.?[0-9]*" )
                if [ "$DEBUG" == "true" ]; then
                    echo "Metric: $METRIC"
                    echo "Channel: $CHANNEL / $MAX_CHANNELS"
                    echo "Channel: $CHANNEL"
                    echo "Value: $VALUE"
                    echo
                fi

                if [ "${CRIT_LOWER[$LINENUMBER]+isset}" ]   && lower   "${CRIT_LOWER[$LINENUMBER]}" "$VALUE"; then
                    OUTPUT="$OUTPUT CRITICAL: Lower limit for $METRIC @ $CHANNEL ${CRIT_LOWER[$LINENUMBER]} is >> than"
                    CRITICAL=1
                elif [ "${CRIT_UPPER[$LINENUMBER]+isset}" ] && greater "${CRIT_UPPER[$LINENUMBER]}" "$VALUE"; then
                    OUTPUT="$OUTPUT CRITICAL: Upper limit for $METRIC @ $CHANNEL ${CRIT_UPPER[$LINENUMBER]} is << than"
                    CRITICAL=1
                elif [ "${WARN_LOWER[$LINENUMBER]+isset}" ] && lower   "${WARN_LOWER[$LINENUMBER]}" "$VALUE"; then
                    OUTPUT="$OUTPUT WARNING: Lower limit for $METRIC @ $CHANNEL ${WARN_LOWER[$LINENUMBER]} is > than"
                    WARNING=1
                elif [ "${WARN_UPPER[$LINENUMBER]+isset}" ] && greater "${WARN_UPPER[$LINENUMBER]}" "$VALUE"; then
                    OUTPUT="$OUTPUT WARNING: Upper limit for $METRIC @ $CHANNEL ${WARN_UPPER[$LINENUMBER]} is < than"
                    WARNING=1
                fi
            else
                VALUE=0
            fi
            OUTPUT="$OUTPUT $VALUE"
            PERFDATA="$PERFDATA '${METRIC} ${CHANNEL}'=$VALUE${UNITS[$LINENUMBER]}"
            CSV="$CSV;$VALUE"
        done
    fi
done < /tmp/icinga-fritzbox-"$HOST"-channels.html

echo "$OUTPUT |$PERFDATA"
if [ ! -z "$CSVOUT" ]; then
    echo "$CSV" >> "$CSVOUT"
fi

if [ $CRITICAL -eq 1 ]; then
    exit 2
elif [ $WARNING -eq 1 ]; then
    exit 1
else
    exit 0
fi
